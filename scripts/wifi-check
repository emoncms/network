#!/bin/bash

echo
now=$(date)
echo "$now: network check"

# Define the array of interfaces
interfaces=("eth0" "ap0" "wlan0")

# Initialize associative arrays
declare -A statusMap
declare -A changeTimeMap
declare -A ipMap

# Loop through each interface
for interface in "${interfaces[@]}"; do

    # ---------------------------------------------------
    # 1 Get current state
    # ---------------------------------------------------
    status=0
    if [ -f /sys/class/net/$interface/carrier ]; then
        status=$(cat /sys/class/net/$interface/carrier)
    fi
    statusMap[$interface]=$status

    # ---------------------------------------------------
    # 2 Get last state and record current state
    # ---------------------------------------------------
    last_state_file="/tmp/${interface}_last_state"
    last_state=0
    if [ -f "$last_state_file" ]; then
        last_state=$(cat "$last_state_file")
    fi
    echo $status > "$last_state_file"

    # ---------------------------------------------------
    # If current state is not last state, record state change time
    # ---------------------------------------------------
    change_file="/tmp/${interface}_changed"
    if [ "$status" != "$last_state" ]; then
        echo "${interface} status has changed"
        date "+%Y-%m-%d %H:%M:%S" > "$change_file"
    fi

    # ---------------------------------------------------
    # Work out change time
    # ---------------------------------------------------
    change_time=0
    if [ -f "$change_file" ]; then
        change_time=$((($(date +%s) - $(date -d "$(cat "$change_file")" +%s))/60))
    else 
        date "+%Y-%m-%d %H:%M:%S" > "$change_file"
    fi
    changeTimeMap[$interface]=$change_time

    # ---------------------------------------------------
    # Get IP address
    # ---------------------------------------------------
    ip=""
    if [ "$status" == 1 ]; then
        ip=$(ip addr show $interface | grep -Po 'inet \K[\d.]+')
    fi
    ipMap[$interface]=$ip

    # ---------------------------------------------------
    # Display status and change time
    # ---------------------------------------------------
    echo "- $interface status: ${statusMap[$interface]}, change time: ${changeTimeMap[$interface]} mins, ip: ${ipMap[$interface]}"
done

# Further code can use statusMap, changeTimeMap, and ipMap for each interface
# For example, to access the status of eth0:
# echo ${statusMap["eth0"]}

# ---------------------------------------------------

# 4) Check for configured WiFi connections
client_configurations=$(ls /etc/NetworkManager/system-connections -1 | grep -v "^hotspot.nmconnection$" | wc -l)
echo "- $client_configurations client configuration"

# ---------------------------------------------------
# Load config file
# ---------------------------------------------------
config_file=/opt/emoncms/modules/network/config.ini
if [ -f $config_file ]; then
    # Use awk to extract values from the config file
    start_on_boot=$(awk -F ' *= *' '/start_on_boot/{print $2}' "$config_file" | tr -d '"')
    stop_mins=$(awk -F ' *= *' '/stop_mins/{print $2}' "$config_file" | tr -d '"')
else
    echo "missing config file"
fi

start_on_boot=${start_on_boot:-"1"}
stop_mins=${stop_mins:-"9"}

# ---------------------------------------------------
# Is this first boot??
# ---------------------------------------------------
if [ ! -f /tmp/wifi-check-firstboot ]; then
    date "+%Y-%m-%d %H:%M:%S" > /tmp/wifi-check-firstboot
    if [ "${statusMap["ap0"]}" == "0" ] && [ "$start_on_boot" == 1 ]; then
        # Start AP
        /opt/emoncms/modules/network/scripts/startAP.sh
    fi
fi

# ---------------------------------------------------
# If wlan0 has been up for 10 mins and ap0 is up
# disable the access point
# ---------------------------------------------------
if [ "${statusMap["ap0"]}" == "1" ] && [ "${statusMap["wlan0"]}" == "1" ]; then
    if [ "${changeTimeMap["wlan0"]}" -gt $stop_mins ] && [ "${changeTimeMap["ap0"]}" -gt $stop_mins ]; then
        # Stop AP
        /opt/emoncms/modules/network/scripts/stopAP.sh
    fi
fi
